# ===== INSTALLATIONS =====
# pip install mutagen pillow pyo python-osc pywin32

# ===== IMPORTATIONS =====
import os
import io
import time
import win32con
import win32gui
import threading
from pyo import *
import tkinter as tk
from ctypes import windll
from mutagen import File
from mutagen.id3 import ID3, APIC
from PIL import Image, ImageTk
from pythonosc import dispatcher, osc_server

# ===== FONCTIONS =====
def jouer_chanson(index):
    '''
    Entr√©e : index (entier) repr√©sentant le num√©ro de la chanson dans la file de lecture
    Joue une chanson et surveille sa progression pour encha√Æner automatiquement.
    '''
    global source_audio, filtre_audio, selecteur_audio, index_chanson_actuelle

    index_chanson_actuelle = index % len(musiques)
    chemin_fichier = musiques[index_chanson_actuelle]

    print(f"üéµ Lecture de : {chemin_fichier}")

    # Arr√™ter l‚Äôancienne source
    try:
        source_audio.stop()
    except NameError:
        pass # Si c'est la premi√®re lecture, il n'y a pas encore de source d√©finie

    # Chargement de la chanson
    source_audio = SfPlayer(chemin_fichier, speed=vitesse, loop=False, mul=0.8)
    
    # D√©finition du filtre passe-bande
    filtre_audio = ButBP(source_audio, freq=frequence, q=2, mul=1.0)
    
    # S√©lectionneur pour basculer entre changement de vitesse et son filtr√©
    selecteur_audio = Selector([source_audio, filtre_audio], voice=0).out()

    # Lancer le thread de surveillance
    threading.Thread(target=surveiller_fin_chanson, daemon=True).start()

    # Mettre √† jour les informations de la chanson
    afficher_info_chanson(musiques[index_chanson_actuelle])

def surveiller_fin_chanson():
    '''
    V√©rifie en continu si la chanson en cours de lecture est termin√©e en fonction de la vitesse et passe √† la suivante si c'est le cas.
    '''
    lecture_active = True
    duree_originale = sndinfo(musiques[index_chanson_actuelle])[1] # Dur√©e en secondes de la chanson

    debut = time.time()
    while lecture_active:
        duree_adaptee = duree_originale / vitesse.value # Ajustement en fonction de la vitesse
        temps_ecoule = time.time() - debut

        if temps_ecoule >= duree_adaptee:
            jouer_chanson(index_chanson_actuelle + 1)
            break

        time.sleep(0.1)

def ajuster_parametres(address, *args):
    '''
    Entr√©es : address (string) d√©signant le chemin d'envoi des donn√©es OSC et args (float) repr√©sentant la valeur de l'adresse
    G√®re les ajustements des param√®tres de la chanson en fonction des donn√©es OSC re√ßues.
    '''
    global verrouillage_vitesse, vitesse_fixe, verrouillage_frequence, frequence_fixe, effet_chorus, effet_distorsion, effet_echo, effet_reverberation, calques_actifs

    if address == "/data/gameController/stick/left/y":
        if selecteur_audio.voice == 0: # Modification de la vitesse
            valeur_joystick = args[0] # Valeur entre -1 et 1
            nouvelle_vitesse = valeur_joystick * 0.75 + 1 # Conversion en √©chelle [0.25, 1.75]

            if not verrouillage_vitesse: # Mise √† jour de la vitesse seulement si verrouillage = False
                print(f"Vitesse de la musique : {nouvelle_vitesse}")
                vitesse.value = nouvelle_vitesse
            else:
                print(f"üîí Vitesse verrouill√©e √† {vitesse_fixe}")
            afficher_parametres()

        elif selecteur_audio.voice == 1: # Modification de la fr√©quence
            valeur_joystick = args[0] # Valeur entre -1 et 1
            nouvelle_frequence = valeur_joystick * 2350 + 2650 # Conversion en √©chelle [300, 5000]

            if not verrouillage_frequence: # Mise √† jour de la fr√©quence seulement si verrouillage_frequence = False
                print(f"Valeur de la fr√©quence : {nouvelle_frequence}")
                frequence.value = nouvelle_frequence
            else:
                print(f"üîí Fr√©quence verrouill√©e √† {frequence_fixe}")
            afficher_parametres()

    elif address == "/data/gameController/shoulder/left" and args[0] == True: # Verrouillage de la vitesse
        # Interrupteur : chaque appui inverse l'√©tat du verrouillage
        verrouillage_vitesse = not verrouillage_vitesse

        if verrouillage_vitesse:
            vitesse_fixe = vitesse.value  # On stocke la vitesse actuelle
            print(f"üîí Vitesse verrouill√©e √† {vitesse_fixe}")
        else:
            print("üîì Vitesse d√©verrouill√©e")
        afficher_parametres()
        calque = os.path.join(dossier_calques, "L.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/shoulder/right" and args[0] == True: # Verrouillage de la fr√©quence
        # Interrupteur : chaque appui inverse l'√©tat du verrouillage
        verrouillage_frequence = not verrouillage_frequence

        if verrouillage_frequence:
            frequence_fixe = frequence.value  # On stocke la fr√©quence actuelle
            print(f"üîí Fr√©quence verrouill√©e √† {frequence_fixe}")
        else:
            print("üîì Fr√©quence d√©verrouill√©e")
        afficher_parametres()
        calque = os.path.join(dossier_calques, "R.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/action/left" and args[0] == True: # Effet chorus
        if effet_chorus is None:
            effet_chorus = Chorus(source_audio, depth=0.8, feedback=0.4, bal=0.7, mul=0.5).out()
            print("üé§ Chorus activ√©.")
        else:
            effet_chorus = None
            print("üé§ Chorus d√©sactiv√©.")
        afficher_parametres()
        calque = os.path.join(dossier_calques, "X.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/action/right" and args[0] == True: # Effet distorsion
        if effet_distorsion is None:
            effet_distorsion = Disto(source_audio, drive=0.8, slope=0.8, mul=0.5).out()
            print("üé∏ Distorsion activ√©e.")
        else:
            effet_distorsion = None
            print("üé∏ Distorsion d√©sactiv√©e.")
        afficher_parametres()
        calque = os.path.join(dossier_calques, "B.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/action/down" and args[0] == True: # Effet √©cho
        if effet_echo is None:
            effet_echo = Delay(source_audio, delay=0.3, feedback=0.6, mul=0.3).out()
            print("üîä √âcho activ√©.")
        else:
            effet_echo = None
            print("üîä √âcho d√©sactiv√©.")
        afficher_parametres()
        calque = os.path.join(dossier_calques, "A.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/action/up" and args[0] == True: # Effet r√©verb√©ration
        if effet_reverberation is None:
            effet_reverberation = Freeverb(source_audio, size=0.9, damp=0.3, bal=0.8, mul=0.6).out()
            print("üåÄ R√©verb√©ration activ√©e.")
        else:
            effet_reverberation = None
            print("üåÄ R√©verb√©ration d√©sactiv√©e.")
        afficher_parametres()
        calque = os.path.join(dossier_calques, "Y.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/dpad/left" and args[0] == True: # Son grosse caisse
        grosse_caisse = SfPlayer(os.path.join(dossier_sons_batterie, "Grosse caisse.mp3"), speed=vitesse, loop=False, mul=0.8).out()
        print("ü•Å Son de grosse caisse")
        calque = os.path.join(dossier_calques, "Fl√®che gauche.png")
        ajouter_ou_retirer_calque(calque)
        time.sleep(0.2)
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/dpad/right" and args[0] == True: # Son caisse claire
        caisse_claire = SfPlayer(os.path.join(dossier_sons_batterie, "Caisse claire.mp3"), speed=vitesse, loop=False, mul=0.8).out()
        print("ü™ò Son de caisse claire")
        calque = os.path.join(dossier_calques, "Fl√®che droite.png")
        ajouter_ou_retirer_calque(calque)
        time.sleep(0.2)
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/dpad/down" and args[0] == True: # Son hihat
        hihat = SfPlayer(os.path.join(dossier_sons_batterie, "Hihat.mp3"), speed=vitesse, loop=False, mul=0.8).out()
        print("üß® Son de hihat")
        calque = os.path.join(dossier_calques, "Fl√®che bas.png")
        ajouter_ou_retirer_calque(calque)
        time.sleep(0.2)
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/dpad/up" and args[0] == True: # Son cymbale
        cymbale = SfPlayer(os.path.join(dossier_sons_batterie, "Cymbale.mp3"), speed=vitesse, loop=False, mul=0.8).out()
        print("üîî Son de cymbale")
        calque = os.path.join(dossier_calques, "Fl√®che haut.png")
        ajouter_ou_retirer_calque(calque)
        time.sleep(0.2)
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/options" and args[0] == True: # Changer de mode
        selecteur_audio.voice = abs(selecteur_audio.voice - 1)
        if selecteur_audio.voice == 0:
            print("‚è≠  Mode actuel : Vitesse")
        elif selecteur_audio.voice == 1:
            print("‚è≠  Mode actuel : Fr√©quence")

    elif address == "/data/gameController/menu" and args[0] == True: # Passer √† la chanson suivante
        print("‚è≠  Changement de chanson")
        jouer_chanson(index_chanson_actuelle + 1)
    
    elif address == "/data/gameController/home" and args[0] == True: # Changer de fen√™tre
        foreground_hwnd = win32gui.GetForegroundWindow()
        fenetre = win32gui.GetWindowText(foreground_hwnd)
        if fenetre == "Hackaphone":
            passer_premier_plan("Visualiseur")
        else:
            passer_premier_plan("Hackaphone")

def passer_premier_plan(fenetre):
    '''
    Entr√©e : fenetre (str) repr√©sentant le nom de la fen√™tre au premier plan
    Permet de choisir entre la fen√™tre "Hackaphone" et la fen√™tre "Visualiseur".
    '''
    hwnd = win32gui.FindWindow(None, fenetre)
    if hwnd != 0:
        win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)
        win32gui.SetForegroundWindow(hwnd)
        return True
    return False

def superposer_calques(calque_base, calques):
    '''
    Entr√©es : calque_base (str) repr√©sentant le chemin d'acc√®s du calque de base et calques (list[str]) d√©signant la liste des chemins d'acc√®s des calques
    Superpose une s√©rie de calques sur le calque de base et retourne l'image r√©sultante.
    '''
    image_base = Image.open(calque_base).convert("RGBA")

    for calque in calques:
        if os.path.exists(calque):
            image_calque = Image.open(calque).convert("RGBA")
            image_base.paste(image_calque, (0, 0), image_calque)

    return image_base

def afficher_image():
    '''
    Met √† jour une image affich√©e dans une interface Tkinter en superposant des calques sur un calque de base.
    '''
    global image_tk

    # Liste des calques √† superposer (Manette.png + ceux actifs)
    calques = [os.path.join(dossier_calques, "Manette.png")] + list(calques_actifs)
    image_resultat = superposer_calques(os.path.join(dossier_calques, "Manette.png"), calques)

    # Mise √† jour de l'image dans Tkinter
    image_tk = ImageTk.PhotoImage(image_resultat)
    label_image.config(image=image_tk)
    label_image.image = image_tk # Stocker la r√©f√©rence pour √©viter la suppression

def ajouter_ou_retirer_calque(calque):
    '''
    Entr√©e : calque (str) repr√©sentant le chemin d'acc√®s du calque
    Ajoute ou retire le calque sur l'interface graphique.
    '''
    if calque in calques_actifs:
        calques_actifs.remove(calque)
    else:
        calques_actifs.add(calque)
    root.after(10, afficher_image) # Mise √† jour fluide avec after()

def afficher_info_chanson(chemin_acces):
    global label_info_chanson

    fichier = File(chemin_acces)
    if fichier is not None and isinstance(fichier.tags, ID3):
        for tag in fichier.tags.values():
            if isinstance(tag, APIC):
                image_data = tag.data
                image = Image.open(io.BytesIO(image_data))
                image = image.resize((150, 150), Image.LANCZOS) # Redimensionner pour une meilleure r√©solution
                image_tk = ImageTk.PhotoImage(image)
                label_info_chanson.config(image=image_tk)
                label_info_chanson.image = image_tk
                break

    nom_fichier = os.path.basename(chemin_acces)
    label_nom_chanson.config(text=nom_fichier.replace(".mp3", ""))

def afficher_parametres():
    '''
    Affiche sur l'interface graphique les diff√©rents param√®tres de la musique.
    '''
    global label_parametres, effet_chorus, effet_distorsion, effet_echo, effet_reverberation

    # Cr√©ation de la cha√Æne de texte avec les param√®tres
    if selecteur_audio.voice == 0: # Modification de la vitesse
        texte_parametres = "üì≥ MODE ACTUEL : VITESSE\n"
        if verrouillage_vitesse:
            texte_parametres += f"üîí Vitesse verrouill√©e √† : {vitesse.value:.2f}x\n"
        else:
            texte_parametres += f"üîì Vitesse de la musique : {vitesse.value:.2f}x\n"
        texte_parametres += f"üîí Fr√©quence indisponible en mode vitesse\n"
    else:
        texte_parametres = "üì≥ MODE ACTUEL : FR√âQUENCE\n"
        if verrouillage_vitesse: # Modification de la fr√©quence
            texte_parametres += f"üîí Vitesse verrouill√©e √† : {vitesse.value:.2f}x\n"
        else:
            texte_parametres += f"üîì Vitesse de la musique : {vitesse.value:.2f}x\n"
        if verrouillage_frequence:
            texte_parametres += f"üîí Fr√©quence verrouill√©e √† : {vitesse.value:.2f}\n"
        else:
            texte_parametres += f"üîì Fr√©quence actuelle : {vitesse.value:.2f}\n"

    # V√©rification des effets activ√©s
    texte_parametres += f"üé§ Chorus {'üî¥' if effet_chorus else '‚≠ï'}\n"
    texte_parametres += f"üé∏ Distorsion {'üî¥' if effet_distorsion else '‚≠ï'}\n"
    texte_parametres += f"üîä √âcho {'üî¥' if effet_echo else '‚≠ï'}\n"
    texte_parametres += f"üåÄ R√©verb√©ration {'üî¥' if effet_reverberation else '‚≠ï'}"

    # Mise √† jour du label avec les nouveaux param√®tres
    label_parametres.config(text=texte_parametres)

# ===== CODE =====
# Initialisation
dossier_chansons = os.path.join(os.path.dirname(__file__), "..\Chansons") # Chemin du dossier contenant les chansons
musiques = [os.path.join(dossier_chansons, f) for f in os.listdir(dossier_chansons) if f.endswith(".mp3")] # R√©cup√©ration des chansons
dossier_calques = os.path.join(os.path.dirname(__file__), "..\Calques Manette Switch Pro") # D√©finition du r√©pertoire des calques
dossier_sons_batterie = os.path.join(os.path.dirname(__file__), "..\Sons batterie") # Chemin du dossier contenant les sons de batterie
sons_batterie = [os.path.join(dossier_sons_batterie, f) for f in os.listdir(dossier_sons_batterie) if f.endswith(".mp3")] # R√©cup√©ration des sons de batterie
serveur = Server().boot().start() # Initialisation du serveur audio

# Variables de contr√¥le
index_chanson_actuelle = 0 # Indice de la premi√®re chanson
vitesse = SigTo(value=1, time=0.1) # Variable pour ajuster la vitesse de la musique
vitesse_fixe = 1 # D√©finition d'une vitesse fig√©e pour le verrouillage
frequence = SigTo(value=1000, time=0.1) # Variable pour ajuster le filtre passe-bande
frequence_fixe = 300 # D√©finition d'une fr√©quence fig√©e pour le verrouillage
verrouillage_vitesse = False # Si verrouillage_vitesse vaut False, on peut modifier la vitesse ; sinon, on la fige
verrouillage_frequence = False # Si verrouillage_frequence vaut False, on peut modifier la fr√©quence ; sinon, on la fige
effet_chorus = None # Effet chorus
effet_distorsion = None # Effet distorsion
effet_echo = None # Effet √©cho
effet_reverberation = None # Effet r√©verb√©ration
calques_actifs = set() # Liste des calques actifs (utilisation d'un set pour √©viter les doublons)
image_tk = None # Variable globale pour stocker l‚Äôimage affich√©e

# Cr√©ation de la fen√™tre principale Tkinter
windll.shcore.SetProcessDpiAwareness(1) # R√®gle la qualit√© de l'interface en fonction de la r√©solution de l'√©cran

root = tk.Tk()
root.title("Hackaphone")
root.state('zoomed') # Pour mettre la fen√™tre en plein √©cran

# Cr√©ation du label pour afficher l'image
label_image = tk.Label(root)
label_image.pack()

# Chargement et affichage initial de l‚Äôimage de base
image_de_base = Image.open(os.path.join(dossier_calques, "Manette.png")).convert("RGBA")
image_tk = ImageTk.PhotoImage(image_de_base)
label_image.config(image=image_tk)
label_image.image = image_tk # Stocker la r√©f√©rence pour √©viter la suppression

# Initialisation du label pour afficher l'image de la chanson
label_info_chanson = tk.Label(root, font=("Arial", 14), anchor="n", padx=10, pady=10)
label_info_chanson.place(relx=1.0, y=50, anchor="ne")

# Initialisation du label pour afficher le nom de la chanson
label_nom_chanson = tk.Label(root, font=("Arial", 14), anchor="n", padx=10, pady=10)
label_nom_chanson.place(relx=1.0, y=0, anchor="ne")

# Initialisation du label pour afficher les param√®tres
label_parametres = tk.Label(root, font=("Arial", 12), anchor="nw", padx=10, pady=10, bd=2, relief="ridge", bg="lightgray")
label_parametres.place(relx=0.01, rely=0.02, anchor="nw")

# Jouer la premi√®re chanson
jouer_chanson(index_chanson_actuelle)

# R√©ception des messages OSC avec dispatcher
disp = dispatcher.Dispatcher()
disp.map("/data/gameController/stick/left/y", ajuster_parametres)
disp.map("/data/gameController/shoulder/left", ajuster_parametres)
disp.map("/data/gameController/shoulder/right", ajuster_parametres)
disp.map("/data/gameController/action/left", ajuster_parametres)
disp.map("/data/gameController/action/right", ajuster_parametres)
disp.map("/data/gameController/action/down", ajuster_parametres)
disp.map("/data/gameController/action/up", ajuster_parametres)
disp.map("/data/gameController/dpad/left", ajuster_parametres)
disp.map("/data/gameController/dpad/right", ajuster_parametres)
disp.map("/data/gameController/dpad/down", ajuster_parametres)
disp.map("/data/gameController/dpad/up", ajuster_parametres)
disp.map("/data/gameController/options", ajuster_parametres)
disp.map("/data/gameController/menu", ajuster_parametres)
disp.map("/data/gameController/home", ajuster_parametres)

# Initialisation du serveur OSC
osc = osc_server.ThreadingOSCUDPServer(('0.0.0.0', 8000), disp)

# Lancer le serveur OSC dans un thread s√©par√©
server_thread = threading.Thread(target=osc.serve_forever)
server_thread.daemon = True
server_thread.start()

# Afficher les param√®tres dans l'interface graphique
afficher_parametres()

# Lancer la boucle principale Tkinter
root.mainloop()