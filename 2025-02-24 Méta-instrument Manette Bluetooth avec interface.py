# ===== INSTALLATIONS =====
# pip install pyo pillow python-osc

# ===== IMPORTATIONS =====
import os
import time
import threading
from pyo import *
import tkinter as tk
from PIL import Image, ImageTk
from pythonosc import dispatcher, osc_server

# ===== FONCTIONS =====
def jouer_chanson(index):
    '''
    Entr√©e : index (entier) repr√©sentant le num√©ro de la chanson dans la file de lecture
    Joue une chanson et surveille sa progression pour encha√Æner automatiquement.
    '''
    global source_audio, filtre_audio, selecteur_audio, index_chanson_actuelle

    index_chanson_actuelle = index % len(musiques)
    chemin_fichier = musiques[index_chanson_actuelle]

    print(f"üéµ Lecture de : {chemin_fichier}")

    # Arr√™ter l‚Äôancienne source
    try:
        source_audio.stop()
    except NameError:
        pass # Si c'est la premi√®re lecture, il n'y a pas encore de source d√©finie

    # Chargement de la chanson
    source_audio = SfPlayer(chemin_fichier, speed=vitesse, loop=False, mul=0.8)
    
    # D√©finition du filtre passe-bande
    filtre_audio = ButBP(source_audio, freq=frequence, q=2, mul=1.0)
    
    # S√©lectionneur pour basculer entre changement de vitesse et son filtr√©
    selecteur_audio = Selector([source_audio, filtre_audio], voice=0).out()

    # Lancer le thread de surveillance
    threading.Thread(target=surveiller_fin_chanson, daemon=True).start()

def surveiller_fin_chanson():
    '''
    V√©rifie en continu si la chanson en cours de lecture est termin√©e en fonction de la vitesse et passe √† la suivante si c'est le cas.
    '''
    lecture_active = True
    duree_originale = sndinfo(musiques[index_chanson_actuelle])[1] # Dur√©e en secondes de la chanson

    debut = time.time()
    while lecture_active:
        duree_adaptee = duree_originale / vitesse.value # Ajustement en fonction de la vitesse
        temps_ecoule = time.time() - debut

        if temps_ecoule >= duree_adaptee:
            jouer_chanson(index_chanson_actuelle + 1)
            break

        time.sleep(0.1)

def ajuster_parametres(address, *args):
    '''
    Entr√©es : address (string) d√©signant le chemin d'envoi des donn√©es OSC et args (float) repr√©sentant la valeur de l'adresse
    G√®re les ajustements des param√®tres de la chanson en fonction des donn√©es OSC re√ßues.
    '''
    global verrouillage, vitesse_fixe, effet_chorus, effet_distorsion, effet_echo, effet_reverberation, effet_harmonizer, effet_tremolo, effet_phaser, effet_bitcrusher, calques_actifs, dernier_changement

    # Ajout d'un d√©lai minimum de 0.2s pour √©viter un spam des donn√©es OSC
    if time.time() - dernier_changement < 0.2:
        return  
    dernier_changement = time.time()

    if address == "/data/gameController/stick/left/y":
        if selecteur_audio.voice == 0: # Modification de la vitesse
            valeur_joystick = args[0] # Valeur entre -1 et 1
            nouvelle_vitesse = (valeur_joystick * 0.75 + 1) # Conversion en √©chelle [0.25, 1.75]

            if not verrouillage: # Mise √† jour de la vitesse seulement si verrouillage = False
                print(f"Vitesse de la musique : {nouvelle_vitesse}")
                vitesse.value = nouvelle_vitesse
            else:
                print(f"üîí Vitesse verrouill√©e √† {vitesse_fixe}")

        elif selecteur_audio.voice == 1: # Modification de la fr√©quence
            valeur_joystick = args[0] # Valeur entre -1 et 1
            nouvelle_frequence = (valeur_joystick * 2350 + 2650) # Conversion en √©chelle [300, 5000]

            print(f"Valeur de la fr√©quence : {nouvelle_frequence}")
            frequence.value = nouvelle_frequence

    elif address == "/data/gameController/shoulder/left" and args[0] == True: # Verrouillage de la vitesse
        # Interrupteur : chaque appui inverse l'√©tat du verrouillage
        verrouillage = not verrouillage

        if verrouillage:
            vitesse_fixe = vitesse.value  # On stocke la vitesse actuelle
            print(f"üîí Vitesse verrouill√©e √† {vitesse_fixe}")
        else:
            print("üîì Vitesse d√©verrouill√©e")
    
    elif address == "/data/gameController/action/left" and args[0] == True: # Effet chorus
        if effet_chorus is None:
            effet_chorus = Chorus(source_audio, depth=0.8, feedback=0.4, bal=0.7, mul=0.5).out()
            print("üé§ Chorus activ√©.")
        else:
            effet_chorus = None
            print("üé§ Chorus d√©sactiv√©.")
        calque = os.path.join(dossier_calques, "A.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/action/right" and args[0] == True: # Effet distorsion
        if effet_distorsion is None:
            effet_distorsion = Disto(source_audio, drive=0.8, slope=0.8, mul=0.5).out()
            print("üé∏ Distorsion activ√©e.")
        else:
            effet_distorsion = None
            print("üé∏ Distorsion d√©sactiv√©e.")
        calque = os.path.join(dossier_calques, "B.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/action/down" and args[0] == True: # Effet √©cho
        if effet_echo is None:
            effet_echo = Delay(source_audio, delay=0.3, feedback=0.6, mul=0.3).out()
            print("üîä √âcho activ√©.")
        else:
            effet_echo = None
            print("üîä √âcho d√©sactiv√©.")
        calque = os.path.join(dossier_calques, "X.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/action/up" and args[0] == True: # Effet r√©verb√©ration
        if effet_reverberation is None:
            effet_reverberation = Freeverb(source_audio, size=0.9, damp=0.3, bal=0.8, mul=0.6).out()
            print("üèõÔ∏è R√©verb√©ration activ√©e.")
        else:
            effet_reverberation = None
            print("üèõÔ∏è R√©verb√©ration d√©sactiv√©e.")
        calque = os.path.join(dossier_calques, "Y.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/dpad/left" and args[0] == True: # Effet harmonizer
        if effet_harmonizer is None:
            env = WinTable(8)
            wsize = 0.1
            trans = -7
            ratio = pow(2.0, trans / 12.0)
            rate = -(ratio - 1) / wsize
            ind = Phasor(freq=rate, phase=[0, 0.5])
            win = Pointer(table=env, index=ind, mul=0.7)
            effet_harmonizer = Delay(source_audio, delay=ind * wsize, mul=win).mix(1).out()
            print("üöÄ Harmonizer activ√©.")
        else:
            effet_harmonizer = None
            print("üöÄ Harmonizer d√©sactiv√©.")
        calque = os.path.join(dossier_calques, "Fl√®che gauche.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/dpad/right" and args[0] == True: # Effet tremolo
        if effet_tremolo is None:
            effet_tremolo = source_audio * (1 - Sine(freq=4, mul=0.5))
            print("üéõÔ∏è Tremolo activ√©.")
        else:
            effet_tremolo = None
            print("üéõÔ∏è Tremolo d√©sactiv√©.")
        calque = os.path.join(dossier_calques, "Fl√®che droite.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/dpad/down" and args[0] == True: # Effet phaser
        if effet_phaser is None:
            effet_phaser = Phaser(source_audio, freq=0.3, spread=0.7, feedback=0.3, num=8, mul=0.5).out()
            print("üåå Phaser activ√©.")
        else:
            effet_phaser = None
            print("üåå Phaser d√©sactiv√©.")
        calque = os.path.join(dossier_calques, "Fl√®che bas.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/dpad/up" and args[0] == True: # Effet bitcrusher
        if effet_bitcrusher is None:
            effet_bitcrusher = Degrade(source_audio, bitdepth=5, srscale=0.5, mul=0.5).out()
            print("üéÆ Bitcrusher activ√©.")
        else:
            effet_bitcrusher = None
            print("üéÆ Bitcrusher d√©sactiv√©.")
        calque = os.path.join(dossier_calques, "Fl√®che haut.png")
        ajouter_ou_retirer_calque(calque)

    elif address == "/data/gameController/menu" and args[0] == True: # Changer de mode
        selecteur_audio.voice = abs(selecteur_audio.voice - 1)
        if selecteur_audio.voice == 0:
            print("‚è≠  Mode actuel : Vitesse")
        elif selecteur_audio.voice == 1:
            print("‚è≠  Mode actuel : Fr√©quence")

    elif address == "/data/gameController/options" and args[0] == True: # Passer √† la chanson suivante
        print("‚è≠  Changement de chanson")
        jouer_chanson(index_chanson_actuelle + 1)

def superposer_calques(calque_base, calques):
    '''
    Entr√©es : calque_base (str) repr√©sentant le chemin d'acc√®s du calque de base et calques (list[str]) d√©signant la liste des chemins d'acc√®s des calques
    Superpose une s√©rie de calques sur le calque de base et retourne l'image r√©sultante.
    '''
    image_base = Image.open(calque_base).convert("RGBA")

    for calque in calques:
        if os.path.exists(calque):
            image_calque = Image.open(calque).convert("RGBA")
            image_base.paste(image_calque, (0, 0), image_calque)

    return image_base

def afficher_image():
    '''
    Met √† jour une image affich√©e dans une interface Tkinter en superposant des calques sur un calque de base.
    '''
    global image_tk

    # Liste des calques √† superposer (Manette.png + ceux actifs)
    calques = [os.path.join(dossier_calques, "Manette.png")] + list(calques_actifs)
    image_resultat = superposer_calques(os.path.join(dossier_calques, "Manette.png"), calques)

    # Mise √† jour de l'image dans Tkinter
    image_tk = ImageTk.PhotoImage(image_resultat)
    label_image.config(image=image_tk)
    label_image.image = image_tk # Stocker la r√©f√©rence pour √©viter la suppression

def ajouter_ou_retirer_calque(calque):
    '''
    Entr√©e : calque (str) repr√©sentant le chemin d'acc√®s du calque
    Ajoute ou retire le calque sur l'interface graphique.
    '''
    if calque in calques_actifs:
        calques_actifs.remove(calque)
    else:
        calques_actifs.add(calque)
    root.after(10, afficher_image) # Mise √† jour fluide avec after()

# ===== CODE =====
# Initialisation
dossier_chansons = os.path.join(os.path.dirname(__file__), "Chansons") # Chemin du dossier contenant les chansons
musiques = [os.path.join(dossier_chansons, f) for f in os.listdir(dossier_chansons) if f.endswith(".mp3")] # R√©cup√©ration des chansons
dossier_calques = os.path.join(os.path.dirname(__file__), "Calques Manette Switch Pro") # D√©finition du r√©pertoire des calques
serveur = Server().boot().start() # Initialisation du serveur audio

# Variables de contr√¥le
index_chanson_actuelle = 0 # Indice de la premi√®re chanson
vitesse = SigTo(value=1, time=0.1) # Variable pour ajuster la vitesse de la musique
vitesse_fixe = 1 # D√©finition d'une vitesse fig√©e pour le verrouillage
frequence = SigTo(value=1000, time=0.1) # Variable pour ajuster le filtre passe-bande
verrouillage = False # Si le verrouillage vaut False, on peut modifier la vitesse ; sinon, on la fige
effet_chorus = None # Effet chorus
effet_distorsion = None # Effet distorsion
effet_echo = None # Effet √©cho
effet_reverberation = None # Effet r√©verb√©ration
effet_harmonizer = None # Effet harmonizer
effet_tremolo = None # Effet tremolo
effet_phaser = None # Effet phaser
effet_bitcrusher = None # Effet bitcrusher
calques_actifs = set() # Liste des calques actifs (utilisation d'un set pour √©viter les doublons)
image_tk = None # Variable globale pour stocker l‚Äôimage affich√©e
dernier_changement = 0 # Timestamp pour √©viter un spam de l'OSC

# Jouer la premi√®re chanson
jouer_chanson(index_chanson_actuelle)

# Cr√©ation de la fen√™tre principale Tkinter
root = tk.Tk()
root.title("Hackaphone")

# Cr√©ation du label pour afficher l'image
label_image = tk.Label(root)
label_image.pack()

# Chargement et affichage initial de l‚Äôimage de base
image_de_base = Image.open(os.path.join(dossier_calques, "Manette.png")).convert("RGBA")
image_tk = ImageTk.PhotoImage(image_de_base)
label_image.config(image=image_tk)
label_image.image = image_tk # Stocker la r√©f√©rence pour √©viter la suppression

# R√©ception des messages OSC avec dispatcher
disp = dispatcher.Dispatcher()
disp.map("/data/gameController/action/left", ajuster_parametres)
disp.map("/data/gameController/action/right", ajuster_parametres)
disp.map("/data/gameController/action/down", ajuster_parametres)
disp.map("/data/gameController/action/up", ajuster_parametres)
disp.map("/data/gameController/dpad/left", ajuster_parametres)
disp.map("/data/gameController/dpad/right", ajuster_parametres)
disp.map("/data/gameController/dpad/down", ajuster_parametres)
disp.map("/data/gameController/dpad/up", ajuster_parametres)

# Initialisation du serveur OSC
osc = osc_server.ThreadingOSCUDPServer(('0.0.0.0', 8000), disp)

# Lancer le serveur OSC dans un thread s√©par√©
server_thread = threading.Thread(target=osc.serve_forever)
server_thread.daemon = True
server_thread.start()

# Lancer la boucle principale Tkinter
root.mainloop()