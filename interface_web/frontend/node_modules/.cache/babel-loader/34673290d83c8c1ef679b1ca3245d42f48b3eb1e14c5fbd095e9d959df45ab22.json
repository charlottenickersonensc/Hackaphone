{"ast":null,"code":"import React,{useEffect,useRef}from'react';import{Box}from'@mui/material';// Composant qui affichera les visualisations dans le navigateur\nimport{jsx as _jsx}from\"react/jsx-runtime\";const WebVisualizer=_ref=>{let{visualizationType,isRunning}=_ref;const canvasRef=useRef(null);const audioContextRef=useRef(null);const analyserRef=useRef(null);const dataArrayRef=useRef(null);const animationRef=useRef(null);// Configuration et démarrage de l'analyse audio\nuseEffect(()=>{let audioContext,analyser,microphone,dataArray;const setupAudio=async()=>{try{// Créer un contexte audio\naudioContext=new(window.AudioContext||window.webkitAudioContext)();audioContextRef.current=audioContext;// Demander l'accès au microphone\nconst stream=await navigator.mediaDevices.getUserMedia({audio:true,video:false});// Créer un nœud d'analyse\nanalyser=audioContext.createAnalyser();analyser.fftSize=2048;analyserRef.current=analyser;// Connecter le microphone à l'analyseur\nmicrophone=audioContext.createMediaStreamSource(stream);microphone.connect(analyser);// Préparer le tableau de données pour l'analyse\nconst bufferLength=analyser.frequencyBinCount;dataArray=new Uint8Array(bufferLength);dataArrayRef.current=dataArray;// Commencer l'animation\nstartVisualization();}catch(error){console.error(\"Erreur lors de la configuration de l'audio:\",error);}};// Nettoyer les ressources audio\nconst cleanupAudio=()=>{if(animationRef.current){cancelAnimationFrame(animationRef.current);animationRef.current=null;}if(audioContextRef.current){audioContextRef.current.close();audioContextRef.current=null;}};// Démarrer ou arrêter en fonction de l'état\nif(isRunning){setupAudio();}else{cleanupAudio();}// Nettoyage lors du démontage du composant\nreturn()=>{cleanupAudio();};},[isRunning]);// Fonction pour démarrer la visualisation\nconst startVisualization=()=>{if(!canvasRef.current||!analyserRef.current||!dataArrayRef.current)return;const canvas=canvasRef.current;const ctx=canvas.getContext('2d');const analyser=analyserRef.current;const dataArray=dataArrayRef.current;// Ajuster la taille du canvas à celle de son conteneur\nconst resize=()=>{canvas.width=canvas.offsetWidth;canvas.height=canvas.offsetHeight;};resize();window.addEventListener('resize',resize);// Fonction d'animation qui sera appelée à chaque frame\nconst animate=()=>{if(!isRunning)return;animationRef.current=requestAnimationFrame(animate);// Obtenir les données audio\nanalyser.getByteFrequencyData(dataArray);// Effacer le canvas\nctx.fillStyle='rgb(0, 0, 0)';ctx.fillRect(0,0,canvas.width,canvas.height);// Dessiner la visualisation en fonction du type sélectionné\nswitch(visualizationType){case'frequency_bands':drawFrequencyBands(ctx,dataArray,canvas);break;case'waveform':drawWaveform(ctx,dataArray,canvas,analyser);break;case'spectrum':drawSpectrum(ctx,dataArray,canvas);break;case'cool_sphere':drawCoolSphere(ctx,dataArray,canvas);break;case'psychadelic':drawPsychedelic(ctx,dataArray,canvas);break;default:drawDefaultVisualization(ctx,dataArray,canvas);break;}};animate();};return/*#__PURE__*/_jsx(Box,{sx:{width:'100%',height:'60vh',bgcolor:'black'},children:/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,style:{width:'100%',height:'100%'}})});};// Fonctions pour dessiner différents types de visualisations\n// Visualisation des bandes de fréquence\nfunction drawFrequencyBands(ctx,dataArray,canvas){const bufferLength=dataArray.length;const barWidth=canvas.width/bufferLength*2.5;let x=0;for(let i=0;i<bufferLength;i++){const barHeight=dataArray[i]*1.5;// Couleur basée sur la fréquence\nconst r=50+dataArray[i]+i/bufferLength*100;const g=50+i/bufferLength*200;const b=250;ctx.fillStyle=`rgb(${r}, ${g}, ${b})`;ctx.fillRect(x,canvas.height-barHeight,barWidth,barHeight);x+=barWidth+1;}}// Visualisation de la forme d'onde\nfunction drawWaveform(ctx,dataArray,canvas,analyser){const bufferLength=analyser.fftSize;const waveformData=new Uint8Array(bufferLength);analyser.getByteTimeDomainData(waveformData);ctx.lineWidth=2;ctx.strokeStyle='rgb(0, 255, 0)';ctx.beginPath();const sliceWidth=canvas.width/bufferLength;let x=0;for(let i=0;i<bufferLength;i++){const v=waveformData[i]/128.0;const y=v*canvas.height/2;if(i===0){ctx.moveTo(x,y);}else{ctx.lineTo(x,y);}x+=sliceWidth;}ctx.lineTo(canvas.width,canvas.height/2);ctx.stroke();}// Visualisation spectrale\nfunction drawSpectrum(ctx,dataArray,canvas){const bufferLength=dataArray.length;const barWidth=canvas.width/bufferLength;let x=0;for(let i=0;i<bufferLength;i++){const barHeight=dataArray[i]/255*canvas.height;// Dégradé de couleurs pour le spectre\nconst hue=i/bufferLength*360;ctx.fillStyle=`hsl(${hue}, 100%, 50%)`;ctx.fillRect(x,canvas.height-barHeight,barWidth,barHeight);x+=barWidth;}}// Visualisation sphère cool\nfunction drawCoolSphere(ctx,dataArray,canvas){const centerX=canvas.width/2;const centerY=canvas.height/2;// Calculer l'amplitude moyenne\nlet sum=0;for(let i=0;i<dataArray.length;i++){sum+=dataArray[i];}const average=sum/dataArray.length;// Dessiner plusieurs cercles qui pulsent avec la musique\nconst baseRadius=Math.min(canvas.width,canvas.height)/4;const numCircles=5;for(let j=0;j<numCircles;j++){// Rayon basé sur l'amplitude et l'index du cercle\nconst radius=baseRadius*(0.5+average/255*0.5)*((numCircles-j)/numCircles);// Couleur qui change avec la fréquence\nconst hue=(j*30+Date.now()/50)%360;ctx.strokeStyle=`hsl(${hue}, 80%, 60%)`;ctx.lineWidth=2+average/255*3;// Dessiner le cercle\nctx.beginPath();ctx.arc(centerX,centerY,radius,0,2*Math.PI);ctx.stroke();}}// Visualisation psychédélique\nfunction drawPsychedelic(ctx,dataArray,canvas){const centerX=canvas.width/2;const centerY=canvas.height/2;const time=Date.now()/1000;// Créer un dégradé qui tourne et pulse avec la musique\nconst gradient=ctx.createRadialGradient(centerX,centerY,0,centerX,centerY,canvas.width/2);// Ajouter des couleurs au dégradé\nfor(let i=0;i<6;i++){const pos=i/5;const hue=(time*20+i*60)%360;// Utiliser la valeur audio pour la saturation\nconst bassIndex=Math.floor(dataArray.length*0.1);const midIndex=Math.floor(dataArray.length*0.5);const trebleIndex=Math.floor(dataArray.length*0.8);const bassValue=dataArray[bassIndex]/255;const midValue=dataArray[midIndex]/255;const trebleValue=dataArray[trebleIndex]/255;// Saturation basée sur les fréquences médiums\nconst saturation=70+midValue*30;// Luminosité basée sur les basses\nconst lightness=40+bassValue*30;gradient.addColorStop(pos,`hsl(${hue}, ${saturation}%, ${lightness}%)`);}// Appliquer le dégradé\nctx.fillStyle=gradient;ctx.fillRect(0,0,canvas.width,canvas.height);// Dessiner des formes qui réagissent aux hautes fréquences\nconst trebleIndex=Math.floor(dataArray.length*0.8);const trebleValue=dataArray[trebleIndex]/255;if(trebleValue>0.5){const numShapes=5+Math.floor(trebleValue*10);for(let i=0;i<numShapes;i++){const x=Math.random()*canvas.width;const y=Math.random()*canvas.height;const size=5+Math.random()*20*trebleValue;ctx.fillStyle=`hsla(${Math.random()*360}, 100%, 70%, 0.7)`;ctx.beginPath();ctx.arc(x,y,size,0,2*Math.PI);ctx.fill();}}}// Visualisation par défaut\nfunction drawDefaultVisualization(ctx,dataArray,canvas){const bufferLength=dataArray.length;const barWidth=canvas.width/bufferLength;let x=0;for(let i=0;i<bufferLength;i++){const barHeight=dataArray[i]*1.5;// Couleur simple\nctx.fillStyle=`rgb(50, 100, ${barHeight+100})`;ctx.fillRect(x,canvas.height-barHeight,barWidth,barHeight);x+=barWidth+1;}}export default WebVisualizer;","map":{"version":3,"names":["React","useEffect","useRef","Box","jsx","_jsx","WebVisualizer","_ref","visualizationType","isRunning","canvasRef","audioContextRef","analyserRef","dataArrayRef","animationRef","audioContext","analyser","microphone","dataArray","setupAudio","window","AudioContext","webkitAudioContext","current","stream","navigator","mediaDevices","getUserMedia","audio","video","createAnalyser","fftSize","createMediaStreamSource","connect","bufferLength","frequencyBinCount","Uint8Array","startVisualization","error","console","cleanupAudio","cancelAnimationFrame","close","canvas","ctx","getContext","resize","width","offsetWidth","height","offsetHeight","addEventListener","animate","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","drawFrequencyBands","drawWaveform","drawSpectrum","drawCoolSphere","drawPsychedelic","drawDefaultVisualization","sx","bgcolor","children","ref","style","length","barWidth","x","i","barHeight","r","g","b","waveformData","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","v","y","moveTo","lineTo","stroke","hue","centerX","centerY","sum","average","baseRadius","Math","min","numCircles","j","radius","Date","now","arc","PI","time","gradient","createRadialGradient","pos","bassIndex","floor","midIndex","trebleIndex","bassValue","midValue","trebleValue","saturation","lightness","addColorStop","numShapes","random","size","fill"],"sources":["/Users/charlottenickerson/introprogrammationcsharp/musicproject/sadnessnewgit/Hackaphone/interface_web/frontend/src/components/WebVisualizer.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box } from '@mui/material';\n\n// Composant qui affichera les visualisations dans le navigateur\nconst WebVisualizer = ({ visualizationType, isRunning }) => {\n  const canvasRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const dataArrayRef = useRef(null);\n  const animationRef = useRef(null);\n  \n  // Configuration et démarrage de l'analyse audio\n  useEffect(() => {\n    let audioContext, analyser, microphone, dataArray;\n    \n    const setupAudio = async () => {\n      try {\n        // Créer un contexte audio\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        audioContextRef.current = audioContext;\n        \n        // Demander l'accès au microphone\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n        \n        // Créer un nœud d'analyse\n        analyser = audioContext.createAnalyser();\n        analyser.fftSize = 2048;\n        analyserRef.current = analyser;\n        \n        // Connecter le microphone à l'analyseur\n        microphone = audioContext.createMediaStreamSource(stream);\n        microphone.connect(analyser);\n        \n        // Préparer le tableau de données pour l'analyse\n        const bufferLength = analyser.frequencyBinCount;\n        dataArray = new Uint8Array(bufferLength);\n        dataArrayRef.current = dataArray;\n        \n        // Commencer l'animation\n        startVisualization();\n      } catch (error) {\n        console.error(\"Erreur lors de la configuration de l'audio:\", error);\n      }\n    };\n    \n    // Nettoyer les ressources audio\n    const cleanupAudio = () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n        animationRef.current = null;\n      }\n      \n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n        audioContextRef.current = null;\n      }\n    };\n    \n    // Démarrer ou arrêter en fonction de l'état\n    if (isRunning) {\n      setupAudio();\n    } else {\n      cleanupAudio();\n    }\n    \n    // Nettoyage lors du démontage du composant\n    return () => {\n      cleanupAudio();\n    };\n  }, [isRunning]);\n  \n  // Fonction pour démarrer la visualisation\n  const startVisualization = () => {\n    if (!canvasRef.current || !analyserRef.current || !dataArrayRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const analyser = analyserRef.current;\n    const dataArray = dataArrayRef.current;\n    \n    // Ajuster la taille du canvas à celle de son conteneur\n    const resize = () => {\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n    };\n    resize();\n    window.addEventListener('resize', resize);\n    \n    // Fonction d'animation qui sera appelée à chaque frame\n    const animate = () => {\n      if (!isRunning) return;\n      \n      animationRef.current = requestAnimationFrame(animate);\n      \n      // Obtenir les données audio\n      analyser.getByteFrequencyData(dataArray);\n      \n      // Effacer le canvas\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Dessiner la visualisation en fonction du type sélectionné\n      switch(visualizationType) {\n        case 'frequency_bands':\n          drawFrequencyBands(ctx, dataArray, canvas);\n          break;\n        case 'waveform':\n          drawWaveform(ctx, dataArray, canvas, analyser);\n          break;\n        case 'spectrum':\n          drawSpectrum(ctx, dataArray, canvas);\n          break;\n        case 'cool_sphere':\n          drawCoolSphere(ctx, dataArray, canvas);\n          break;\n        case 'psychadelic':\n          drawPsychedelic(ctx, dataArray, canvas);\n          break;\n        default:\n          drawDefaultVisualization(ctx, dataArray, canvas);\n          break;\n      }\n    };\n    \n    animate();\n  };\n  \n  return (\n    <Box sx={{ width: '100%', height: '60vh', bgcolor: 'black' }}>\n      <canvas \n        ref={canvasRef} \n        style={{ width: '100%', height: '100%' }} \n      />\n    </Box>\n  );\n};\n\n// Fonctions pour dessiner différents types de visualisations\n\n// Visualisation des bandes de fréquence\nfunction drawFrequencyBands(ctx, dataArray, canvas) {\n  const bufferLength = dataArray.length;\n  const barWidth = canvas.width / bufferLength * 2.5;\n  let x = 0;\n  \n  for (let i = 0; i < bufferLength; i++) {\n    const barHeight = dataArray[i] * 1.5;\n    \n    // Couleur basée sur la fréquence\n    const r = 50 + dataArray[i] + (i / bufferLength * 100);\n    const g = 50 + (i / bufferLength * 200);\n    const b = 250;\n    \n    ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n    ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n    \n    x += barWidth + 1;\n  }\n}\n\n// Visualisation de la forme d'onde\nfunction drawWaveform(ctx, dataArray, canvas, analyser) {\n  const bufferLength = analyser.fftSize;\n  const waveformData = new Uint8Array(bufferLength);\n  analyser.getByteTimeDomainData(waveformData);\n  \n  ctx.lineWidth = 2;\n  ctx.strokeStyle = 'rgb(0, 255, 0)';\n  ctx.beginPath();\n  \n  const sliceWidth = canvas.width / bufferLength;\n  let x = 0;\n  \n  for (let i = 0; i < bufferLength; i++) {\n    const v = waveformData[i] / 128.0;\n    const y = v * canvas.height / 2;\n    \n    if (i === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n    \n    x += sliceWidth;\n  }\n  \n  ctx.lineTo(canvas.width, canvas.height / 2);\n  ctx.stroke();\n}\n\n// Visualisation spectrale\nfunction drawSpectrum(ctx, dataArray, canvas) {\n  const bufferLength = dataArray.length;\n  const barWidth = canvas.width / bufferLength;\n  let x = 0;\n  \n  for (let i = 0; i < bufferLength; i++) {\n    const barHeight = dataArray[i] / 255 * canvas.height;\n    \n    // Dégradé de couleurs pour le spectre\n    const hue = i / bufferLength * 360;\n    ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;\n    ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n    \n    x += barWidth;\n  }\n}\n\n// Visualisation sphère cool\nfunction drawCoolSphere(ctx, dataArray, canvas) {\n  const centerX = canvas.width / 2;\n  const centerY = canvas.height / 2;\n  \n  // Calculer l'amplitude moyenne\n  let sum = 0;\n  for (let i = 0; i < dataArray.length; i++) {\n    sum += dataArray[i];\n  }\n  const average = sum / dataArray.length;\n  \n  // Dessiner plusieurs cercles qui pulsent avec la musique\n  const baseRadius = Math.min(canvas.width, canvas.height) / 4;\n  const numCircles = 5;\n  \n  for (let j = 0; j < numCircles; j++) {\n    // Rayon basé sur l'amplitude et l'index du cercle\n    const radius = baseRadius * (0.5 + (average / 255) * 0.5) * ((numCircles - j) / numCircles);\n    \n    // Couleur qui change avec la fréquence\n    const hue = (j * 30 + Date.now() / 50) % 360;\n    ctx.strokeStyle = `hsl(${hue}, 80%, 60%)`;\n    ctx.lineWidth = 2 + (average / 255) * 3;\n    \n    // Dessiner le cercle\n    ctx.beginPath();\n    ctx.arc(\n      centerX, \n      centerY, \n      radius, \n      0, \n      2 * Math.PI\n    );\n    ctx.stroke();\n  }\n}\n\n// Visualisation psychédélique\nfunction drawPsychedelic(ctx, dataArray, canvas) {\n  const centerX = canvas.width / 2;\n  const centerY = canvas.height / 2;\n  const time = Date.now() / 1000;\n  \n  // Créer un dégradé qui tourne et pulse avec la musique\n  const gradient = ctx.createRadialGradient(\n    centerX, centerY, 0,\n    centerX, centerY, canvas.width / 2\n  );\n  \n  // Ajouter des couleurs au dégradé\n  for (let i = 0; i < 6; i++) {\n    const pos = i / 5;\n    const hue = (time * 20 + i * 60) % 360;\n    \n    // Utiliser la valeur audio pour la saturation\n    const bassIndex = Math.floor(dataArray.length * 0.1);\n    const midIndex = Math.floor(dataArray.length * 0.5);\n    const trebleIndex = Math.floor(dataArray.length * 0.8);\n    \n    const bassValue = dataArray[bassIndex] / 255;\n    const midValue = dataArray[midIndex] / 255;\n    const trebleValue = dataArray[trebleIndex] / 255;\n    \n    // Saturation basée sur les fréquences médiums\n    const saturation = 70 + midValue * 30;\n    \n    // Luminosité basée sur les basses\n    const lightness = 40 + bassValue * 30;\n    \n    gradient.addColorStop(pos, `hsl(${hue}, ${saturation}%, ${lightness}%)`);\n  }\n  \n  // Appliquer le dégradé\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  \n  // Dessiner des formes qui réagissent aux hautes fréquences\n  const trebleIndex = Math.floor(dataArray.length * 0.8);\n  const trebleValue = dataArray[trebleIndex] / 255;\n  \n  if (trebleValue > 0.5) {\n    const numShapes = 5 + Math.floor(trebleValue * 10);\n    \n    for (let i = 0; i < numShapes; i++) {\n      const x = Math.random() * canvas.width;\n      const y = Math.random() * canvas.height;\n      const size = 5 + Math.random() * 20 * trebleValue;\n      \n      ctx.fillStyle = `hsla(${Math.random() * 360}, 100%, 70%, 0.7)`;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, 2 * Math.PI);\n      ctx.fill();\n    }\n  }\n}\n\n// Visualisation par défaut\nfunction drawDefaultVisualization(ctx, dataArray, canvas) {\n  const bufferLength = dataArray.length;\n  const barWidth = canvas.width / bufferLength;\n  let x = 0;\n  \n  for (let i = 0; i < bufferLength; i++) {\n    const barHeight = dataArray[i] * 1.5;\n    \n    // Couleur simple\n    ctx.fillStyle = `rgb(50, 100, ${barHeight + 100})`;\n    ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n    \n    x += barWidth + 1;\n  }\n}\n\nexport default WebVisualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}